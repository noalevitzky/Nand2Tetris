// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array stringArray;
    field int stringLength;
    field int maxSize;
	field int curIteration;
	field int maxSize;
	field boolean empty;
	field int intLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
	 
    constructor String new(int maxLength) {
	    let stringLength = 0;
        let maxSize = maxLength;
		let intLength = 0;
		if (maxSize > 0){
			let stringArray = Array.new(maxLength);
			let empty = false;
		}
		else{
			let empty = true;
		}
		let curIteration = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (empty){
			return;
		}
        do stringArray.dispose();
		return;
	}

    /** Returns the current length of this string. */
    method int length() {
        return stringLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return stringArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let stringArray[j] = c;
		if ((stringLength -1) < j){
			let stringLength = j+1;
		}
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (stringLength = maxSize){
            return this;
        }
        let stringArray[stringLength] = c;
		let stringLength = stringLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	    let stringLength = stringLength - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		
        var int sign;
        var int i;
        var int stringCurChar;
        var int val;
        let val = 0;
        let i = 0;
        let sign = charAt(0);
        if (sign = 45){
            let sign = -1;
			let i = i+1;
        }
        else{
            let sign = 1;
        }
        while ((i<length()) & (charAt(i)>47) & (charAt(i) <58)){
            let stringCurChar = charAt(i) - 48;
            let val = Math.multiply(val, 10) + stringCurChar;
			let i = i+1;
        }
		if (sign = 1){
			return val;
		}
		else{
			return 0-val;
		}
	}


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int curDigit;
		var boolean neg;
		var int numberChar;
		var int index;
		var int temp;
		
		let temp = val;
		let neg = false;
		if (curIteration = 0){
			let intLength = String.getIntIndex(val);
		}
		
		if ((val < 0) & (curIteration = 0)){
			do setCharAt(0,45);
			let neg = true;
			let intLength = intLength + 1;
			let temp = 0 - val;
        }
		if ((temp)>10){
			let curDigit = Math.divide(temp, 10);
			let curIteration = curIteration + 1;
			do setInt(curDigit);
			let curIteration = curIteration - 1;
		}
		
		let numberChar = temp - Math.multiply(Math.divide(temp, 10),10);
		let index = intLength - curIteration;
		
		do setCharAt(index, (numberChar+48));
		if (curIteration = 1){
			if (neg){
				return;
			}
		}
		if (curIteration = 0){
			let intLength = 0;
			let curIteration = 0;
		}
		if (curIteration = 1){
			if (neg){
				let intLength = 0;
				let curIteration = 0;				
			}
		}
		
		return;
    }
		
	
	function int getIntIndex(int val){
		var int len;
		var int temp;
		let len = -1;
		let temp = val;
		if (temp<0){
			let temp = Math.multiply(temp, -1);
		}
		while (temp > 0){
			let temp = Math.divide(temp, 10);
			let len = len + 1;
		}
		return len;
	}
    

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
















