// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/heapBaseory.jack

/**
 * This library provides two services: direct access to the computer's main
 * heapBaseory (RAM), and allocation and recycling of heapBaseory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array heapBase;
	static int freeList; 

    /** Initializes the class. */
    function void init() {
		let heapBase = 2048;
		let freeList = 0;
		
		// set heapBase next to current segement (first)
		let heapBase[0] = null;
		
		// set heapBase size to the entire heapBase
		let heapBase[1] = 14335;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return heapBase[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let heapBase[address] = value;
		return;
    }

       /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int i, seg_size, block, last_seg, diff;
			
		// go over free list in first fit search
		let i = freeList;
		let seg_size = Memory.peek(i + 1);
		
		while (~(Memory.peek(i) = null)) {
			let seg_size = Memory.peek(i + 1);
			
			if (seg_size < (size + 2)) {
				let i = Memory.peek(i);
			}
			
			else { // possible fit
				if (seg_size = size + 2){
					let block = Memory.peek(i) + 4;
					do Memory.poke(block - 2, null);
					do Memory.poke(block - 1, size);
					do Memory.poke(i + 1, 0);
					return block;
				}
		
				else{ // (seg_size > (size + 2))			
					let block = Memory.peek(i) + 2 + (seg_size - size);
					do Memory.poke(block - 2, null);
					do Memory.poke(block - 1, size);
					do Memory.poke(i + 1, seg_size - (size + 2));
					return block;
				}
			}
		}
		
		let block = Memory.peek(i) + 2 + (seg_size - (size + 2));
		do Memory.poke(block - 2, null);
		do Memory.poke(block - 1, size);
		do Memory.poke(i + 1, seg_size - (size + 2));
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int i, new_addr;
		let new_addr = o - 2;
		let i = freeList;

		// go over freelist until last 
		while (~(Memory.peek(i) = null)) { 
			let i = Memory.peek(i); 
		}
		
		do Memory.poke(i, new_addr);
		return;		
    }    
}
