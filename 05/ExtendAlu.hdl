/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:

    ShiftRight(in=x, out=xr);
    ShiftRight(in=y, out=yr);
    ShiftLeft(in=x, out=xl);
    ShiftLeft(in=y, out=yl);
    Mux4Way16(a=yr, b=xr, c=yl, d=xl,sel=instruction[4..5], out = w2);
    Mul(a=x, b=y, out=w3);
    ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3],
    ny=instruction[2], f=instruction[1], no=instruction[0], out=w1,
    zr=p1, ng=p2);


    Mux4Way16(a=w3, b=w2, c=w3, d=w1, sel=instruction[7..8], out[15] = ng, out[0..7]=q1, out[8..15]=q2, out = out);


    Or8Way(in = q1, out = orq1);
    Or8Way(in = q2, in[7] = false, out = orq2);
    Or(a=orq1, b=orq2, out=nzr);
    Not( in=nzr, out = zr);
}