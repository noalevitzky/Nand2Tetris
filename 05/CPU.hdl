// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
       And(a=instruction[0], b=inst15, out=r3);
       And(a=instruction[1], b=inst15, out=r2);
       And(a=instruction[2], b=inst15, out=r1);
       And(a=instruction[3], b=inst15, out=storem, out=writeM);
       And(a=instruction[4], b=inst15, out=q2);
       And(a=instruction[5], b=inst15, out=q1);
       And(a=instruction[12], b=inst15, out=inst12);
       And(a=instruction[15], b=true, out=inst15);
       Not(in=inst15, out=w3);

       PC(in= w1, load= l1, inc= true, reset= reset, out[0..14]=pc);


       Or(a=w3, b=q1, out=y3);
       Mux16(a=instruction, b=t1, sel=q1, out=y4);
       ARegister(in=y4, load=y3, out=w1, out[0..14]=addressM);
       DRegister(in=t1, load=q2, out=y2);

       And(a=r1, b=ngforalu, out=jl);
       And(a=r2, b=zrforalu, out=eq);
       And(a=r3, b=pforalu, out=gt);
       Not(in=ngforalu, out=notngforalu);
       Not(in=zrforalu, out=notzrforalu);
       And(a=notngforalu, b=notzrforalu, out=pforalu);
       Or8Way(in[0]=jl, in[1]=eq, in[2]=gt, in[3..7]=false, out=l1);
       Mux16(a=w1, b=inM, sel=inst12, out=y5);


       ALU(x=y2, y=y5, zx=instruction[11], nx=instruction[10],
           zy=instruction[9], ny=instruction[8], f=instruction[7],
           no=instruction[6], zr=zrforalu, ng=ngforalu, out=outM, out=t1);

}
